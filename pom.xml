<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.7</version>
    <relativePath /> <!-- lookup parent from repository -->
  </parent>
  <groupId>com.examples</groupId>
  <artifactId>demo-spring-testing</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>demo-spring-testing</name>
  <description>Demo project for Spring Boot Testing</description>

  <properties>
    <java.version>1.8</java.version>

    <skip.unit-tests>false</skip.unit-tests>
    <skip.integration-tests>false</skip.integration-tests>

    <!-- For SonarQube -->
    <sonar.coverage.jacoco.xmlReportPaths>
      ${project.reporting.outputDirectory}/jacoco/jacoco.xml
    </sonar.coverage.jacoco.xmlReportPaths>
    <!-- Also collects integration tests -->
    <sonar.junit.reportPaths>
      ${project.build.directory}/surefire-reports,
      ${project.build.directory}/failsafe-reports
    </sonar.junit.reportPaths>
    <!-- Also scans HTML files -->
    <sonar.sources>
      pom.xml,
      ${project.build.sourceDirectory},
      ${basedir}/src/main/resources
    </sonar.sources>
    <!-- Manually specify sonar.tests since, if we run sonar:sonar
      in a separate build, SonarQube can only detect the standard
      test source folder and not the additional ones configured by
      build-helper-maven-plugin (src/it/java and src/e2e/java).
      This way, SonarQube will keep track also of integration and
      e2e tests. -->
    <sonar.tests>
      ${project.build.testSourceDirectory},
      ${basedir}/src/it/java,
      ${basedir}/src/e2e/java
    </sonar.tests>
    <!-- Exclude non covered files -->
    <sonar.coverage.exclusions>
      **/*Application.*,
      **/model/*
    </sonar.coverage.exclusions>
    <!-- For each rule to be ignore, add another eXX and two corresponding 
      properties with eXX in the name as below -->
    <sonar.issue.ignore.multicriteria>e11,e12</sonar.issue.ignore.multicriteria>
    <!-- "Tests should include assertions" disabled on some classes like 
      *ApplicationTests which just checks that the Spring application can start, 
      without any assertion -->
    <sonar.issue.ignore.multicriteria.e11.ruleKey>
      java:S2699
    </sonar.issue.ignore.multicriteria.e11.ruleKey>
    <sonar.issue.ignore.multicriteria.e11.resourceKey>
      **/*ApplicationTests.java
    </sonar.issue.ignore.multicriteria.e11.resourceKey>
    <!-- "Persistent entities should not be used as arguments of "@RequestMapping" methods",
      https://rules.sonarsource.com/java/tag/spring/RSPEC-4684
      in this simple project we ignore such a rule -->
    <sonar.issue.ignore.multicriteria.e12.ruleKey>
      java:S4684
    </sonar.issue.ignore.multicriteria.e12.ruleKey>
    <sonar.issue.ignore.multicriteria.e12.resourceKey>
      **/*Controller.java
    </sonar.issue.ignore.multicriteria.e12.resourceKey>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>spring-mock-mvc</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.sourceforge.htmlunit</groupId>
      <artifactId>htmlunit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>htmlunit-driver</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-support</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.github.bonigarcia</groupId>
      <artifactId>webdrivermanager</artifactId>
      <version>5.0.3</version>
      <scope>test</scope>
    </dependency>
    <!-- https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing
      JUnit 4 has been removed from spring-boot-starter-test
      in new versions of Spring Boot, so we have to add the Jupiter vintage explicitly.
      hamcrest-core is excluded in favor of org.hamcrest:hamcrest
      that is part of spring-boot-starter-test
    -->
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>process-resources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/it/java</source>
                <source>src/e2e/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>${skip.unit-tests}</skipTests>
          <includes>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <skipTests>${skip.integration-tests}</skipTests>
              <includes>
                <include>**/*ApplicationTests.java</include>
                <include>**/*IT.java</include>
              </includes>
            </configuration>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.6</version>
          <configuration>
            <excludes>
              <exclude>**/*Application.*</exclude>
              <exclude>**/model/*</exclude>
              <!-- The following is just to avoid the instrumentation error
                (when running EmployeeWebControllerTest) due to the
                HtmlUnit class StyleAttributes$Definition
                (method too large) -->
              <exclude>**/htmlunit/*</exclude>
            </excludes>
          </configuration>
          <executions>
            <execution>
              <goals>
                <!-- binds by default to the phase "initialize" -->
                <goal>prepare-agent</goal>
                <!-- binds by default to the phase "verify" -->
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- You must run coveralls:report explicitly -->
        <plugin>
          <groupId>org.eluder.coveralls</groupId>
          <artifactId>coveralls-maven-plugin</artifactId>
          <version>4.3.0</version>
          <dependencies>
            <!-- This is required when using JDK 9 or higher
              since javax.xml.bind has been removed from the JDK -->
            <dependency>
              <groupId>javax.xml.bind</groupId>
              <artifactId>jaxb-api</artifactId>
              <version>2.3.1</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>3.8.0.2131</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <profiles>
    <profile>
      <id>jacoco</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <configuration>
              <!-- Don't use the default property so that we'll do code 
                coverage only for surefire tests (not for failsafe) -->
              <propertyName>surefireArgLine</propertyName>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <!-- Code coverage for surefire tests only -->
              <argLine>${surefireArgLine}</argLine>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>e2e-tests</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <skip.unit-tests>true</skip.unit-tests>
        <skip.integration-tests>true</skip.integration-tests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>reserve-tomcat-port</id>
                <goals>
                  <goal>reserve-network-port</goal>
                </goals>
                <phase>process-resources</phase>
                <configuration>
                  <portNames>
                    <portName>tomcat.http.port</portName>
                  </portNames>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>pre-integration-test</id>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <arguments>
                    <argument>--server.port=${tomcat.http.port}</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>post-integration-test</id>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>e2e-tests</id>
                <configuration>
                  <includes>
                    <include>**/*E2E.java</include>
                  </includes>
                </configuration>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <systemPropertyVariables>
                <server.port>${tomcat.http.port}</server.port>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
